import { DSQuery } from './ds-query';
import { DSTQuery } from './dst-query';
import { DSTransaction } from './ds-transaction';
import { RunContextServer } from '../../rc-server';
import { Mubble } from '@mubble/core';
export declare type BASEDATASTORE_PROTECTED_FIELDS = 'createTs' | 'deleted' | 'modUid';
export declare type DATASTORE_COMPARISON_SYMBOL = '=' | '<' | '>' | '<=' | '>=';
export declare abstract class BaseDatastore<T extends BaseDatastore<T> = any> {
    protected _id: number | string;
    protected createTs: number;
    protected deleted: boolean;
    modTs: number;
    protected modUid: number;
    protected static _kindName: string;
    private static _namespace;
    static _datastore: any;
    static _autoFields: Array<keyof BaseDatastore | BASEDATASTORE_PROTECTED_FIELDS>;
    static _indexedFields: Array<keyof BaseDatastore | BASEDATASTORE_PROTECTED_FIELDS>;
    constructor(id?: string | number);
    abstract getIndexedFields(rc: RunContextServer): Array<keyof T | BASEDATASTORE_PROTECTED_FIELDS>;
    abstract getUniqueConstraints(rc: RunContextServer): Array<keyof T>;
    getUniqueConstraintValues(rc: RunContextServer, updRec?: any): Array<string>;
    static init(rc: RunContextServer, gcloudEnv: any): void;
    isGlobalNamespace(rc: RunContextServer): boolean;
    getNamespace(rc: RunContextServer): string;
    setNamespace(rc: RunContextServer, namespace: string): void;
    protected get(rc: RunContextServer, id: number | string, ignoreRNF?: boolean): Promise<boolean>;
    static mGet<T extends BaseDatastore<T>>(rc: RunContextServer, ignoreRNF: boolean, ...recs: T[]): Promise<boolean>;
    private static mGetInternal;
    static mInsert<T extends BaseDatastore<T>>(rc: RunContextServer, insertTime: number | undefined, allowDupRec: boolean, ...recs: T[]): Promise<boolean>;
    private static mInsertInternal;
    static mUpdate<T extends BaseDatastore>(rc: RunContextServer, ...recs: T[]): Promise<boolean>;
    private static mUpdateInternal;
    static mDelete<T extends BaseDatastore<T>>(rc: RunContextServer, ...recs: T[]): Promise<boolean>;
    private static mDeleteInternal;
    static mSoftDelete<T extends BaseDatastore<T>>(rc: RunContextServer, ...recs: T[]): Promise<boolean>;
    private static mSoftDeleteInternal;
    protected insert(rc: RunContextServer, insertTime?: number, allowDupRec?: boolean): Promise<boolean>;
    protected update(rc: RunContextServer, id: number | string, updRec: Mubble.uChildObject<T>, ignoreRNF?: boolean): Promise<BaseDatastore<T>>;
    protected softDelete(rc: RunContextServer, id: number | string, params?: Mubble.uChildObject<T>, ignoreRNF?: boolean): Promise<boolean>;
    static getKindName(rc: RunContextServer): string;
    getCreateTs(rc: RunContextServer): number;
    isDeleted(rc: RunContextServer): boolean;
    static getIdFromResult(rc: RunContextServer, res: any): number | string;
    static getKeyFromResult(rc: RunContextServer, res: any): any;
    getId(rc: RunContextServer): number | string;
    setId(id: number | string): void;
    setIdFromResult(rc: RunContextServer, res: any): void;
    setIdFromKey(rc: RunContextServer, key: any): void;
    createQuery(rc: RunContextServer, transaction?: DSTransaction<T>): DSQuery<T> | DSTQuery<T>;
    static createQueryWithNamespace<T extends BaseDatastore>(rc: RunContextServer, namespace: string): DSQuery<T>;
    static createTransaction<T extends BaseDatastore<T> = any>(rc: RunContextServer): DSTransaction<T>;
    static getUniqueEntities<T extends BaseDatastore<T>>(rc: RunContextServer, ...models: T[]): {
        key: any;
        data: any;
    }[];
    static getUniqueEntitiesForUpdate<T extends BaseDatastore<T>>(rc: RunContextServer, model: T, ...updRecs: any[]): {
        key: any;
        data: any;
    }[];
    getDatastoreKey(rc: RunContextServer, id?: number | string | null, unique?: boolean, parentKey?: any): any;
    allocateId(rc: RunContextServer): Promise<number>;
    deserialize(rc: RunContextServer, value: T): this;
    clone(rc: RunContextServer, onlyId?: boolean): T;
    getInsertRec(rc: RunContextServer, insertTime?: number, insertRec?: BaseDatastore<T> | BaseDatastore<T>[]): Array<any>;
    getUpdateRec(rc: RunContextServer, updateRec?: BaseDatastore<T> | BaseDatastore<T>[], updateTime?: number): Array<any>;
    private serialize;
}
